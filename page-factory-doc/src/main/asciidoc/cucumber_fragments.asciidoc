==== Фрагменты

*__Фрагмент__* - набор шагов, который может быть подставлен в любой сценарий вместо заранее определенного шага

Чтобы использовать фрагменты, необходимо прописать в файле конфигурации `application.properties`

[source,]
----
fragments.enabled = true
----

Рассмотрим пример::
*__Сценарий A__* - сценарий, в который нужно подставить шаги +
*__Сценарий B__* - сценарий-фрагмент, шаги которого можно подставить в любой сценарий

image::images/fragment.png[]

Подстановку фрагмента можно выполнить, используя один из шагов

[source,]
----
    * пользователь вставляет фрагмент "Название фрагмента"
    * пользователь вставляет фрагмент "Название фрагмента"
		| параметр 1 | параметр 2 |
		| значение   | значение   |
----

В примере выше "Название фрагмента" выделено [lime]#зеленым#.


===== Как создавать фрагменты
{counter:a}. Создать фичу, которая будет содержать фрагменты +
{counter:a}. Прописать путь до каталога с фрагментами в файле конфигурации `application.properties`. Например:

[source,]
----
fragments.path = src/test/resources/fragments
----

TIP: В случае, если этот параметр не указан, то поиск фрагментов будет происходить в директории, которая указана в @CucumberOptions.features

{counter:a}. Создать сценарий-фрагмент +
{counter:a}. Аннотировать созданный сценарий как `@fragment`


WARNING: [red]#Не используйте фрагменты как независимые тестовые сценарии#


===== Пример параметризованного фрагмента
*__Параметры__*: логин и пароль +
*__Значения параметров__*: User и 123 +

image::images/param_fragment.png[]


* В *B* подстановка обозначена символами *"<>"*. Внутри указано имя параметра
* В *А* выполняется вставка фрагмента с параметрами в виде таблицы данных. Первая строка таблицы — имена параметров, вторая — значения

===== Пример параметризованного фрагмента с несколькими строками значений
*__Параметры__*: логин и пароль +
*__Значения параметров__*: Alex и 123, Tony и 456 +

image::images/many_param_fragment.png[]


* В случаях, когда в таблице параметров более одной строки, фрагмент будет подставлен столько раз, сколько строк в таблице. В каждой подстановке будут использованы значения соответствующей строки

===== Цепочки фрагментов
Допускается использование фрагментов внутри других фрагментов

Пример

image::images/fragments.png[]


WARNING: [red]#*__Не допускается:__* +
1. Вызывать фрагмент из самого себя +
2. Зацикливать вызовов фрагментов# +
 +
 Эти исключительные ситуации обрабатываются и тесты будут остановлены до запуска обработчика `cucumber`

===== Динамические фрагменты
Фрагменты можно подставлять динамически в зависимости от тестовых данных. Например:

image::images/dynamic-fragment.png[]

Это так же может быть удобно для запуска в условиях постоянно меняющихся тестовых данных либо условий тестирования (различные версий приложения)

Рассмотрим подробнее. Допустим, у нас есть тестовый сценарий, проверяющий работу с данными клиента. Клиент может быть новым (нет в системе) и старым. Если клиент новый, его нужно завести. Если старый, то найти через поиск и проверить, что он был найден. Поэтому в нашем примере будет два фрагмента — по одному для каждой из ситуаций плюс тестовые данные сценария

image::images/dynamic_fragment_ex1.png[]

В ситуации, когда клиент уже известен (Client = User) выполнится фрагмент "Проверка данных клиента"

image::images/dynamic_fragment_ex3.png[]

И, напротив, для неизвестного клиента (Client = Unauthorized user) выполнится "Заполнение данных клиента"

image::images/dynamic_fragment_ex2.png[]



